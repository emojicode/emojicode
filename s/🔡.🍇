📗
  Strings.

  In Emojicode strings are strictly used to represent textual data, i.e. strings
  are not used to store binary data or the like. If you need to work with binary
  data see [[📇]].

  ### Characters, Graphemes and Random Access

  Due to the complexity of working with text, 🔡 does not support random access.
  For instance, consider this character `한`. To a human being, this is one
  character. Yet, it actually consists of three Unicode code points, as this is
  the characters ㅎ, ㅏ and ㄴ combined. An even better example is `✋🏾` (you should
  see a raised hand with darker skin color). While this is one emoji, it is
  composed by two Unicode code points and encoded with seven bytes in UTF-8.

  Unicode defines ✋🏾 and 한 as graphemes. A grapheme is what humans would
  recognize as one character.

  Emojicode only allows you to access these graphemes. Finding graphemes is not
  a constant-time operation, though. Random access is not possible, therefore.

  If you need to deal with the graphemes of a string, you can use the [[🎶❗️]]
  method, which returns an array of graphemes. Graphemes are always represented
  as strings.

  To determine the number of graphemes in a string, you can use 📏 on that array.
  To determine the number of UTF-8 bytes that make up a string, use 📐.

  ### Mutability

  Strings are immutable. This means that you can’t modify any string. You can,
however, call methods on strings that return modified copies of the orginal
string, but those themselves are then immutable again.

  ### String Literals and Interpolation

  To learn more about 🔤🔤 String Literals and 🧲 Interpolation [see
  the Language Reference.](../../reference/literals.html#-string-literals)
📗
🌍 🐇 🔡 🍇
  🖍🆕 bytes 🧠
  🖍🆕 count 🔢

  🐊 🔂🐚🔡🍆
  🐊 😛🐚🔡🍆
  🐊 ↘️🔸🔡

  📗 Creates a 🔡 by copying the memory from the *memory*. 📗
  ☣️ 🆕 memory 🧠 🍼 count 🔢 🍇
    count ➡️ size
    🆕🧠 size❗️ ➡️ 🖍bytes
    🚜 bytes 0 memory 0 size❗️
  🍉

  📗
    Returns the 🧠 storing the value of this 🔡. No copy is performed.

    >!H Only read from the 🧠. When writing to the 🧠 returned by this method,
    >!H the behavior is undefined.
  📗
  ❗️🧠 ➡️ 🧠 🍇
    ↩️ bytes
  🍉

  📗
    Waits for the user to input a text and confirm it with enter.
    No new line character is included as part of the string.
    (Via the standard input/output)
  📗
  🆕 ▶️👂🏼 📻 🔤sStringReadLine🔤

  📗
    Creates a string by joining all elements into a string separated
    by *separator*.
  📗
  🆕 list 🍨🐚🔡🍆 separator 🔡 🍇
    🆕🔠❗️ ➡️ builder
    🔂 i 🆕⏩ 0 📏list❓ ❗️  🍇
      🐻 builder 🐽list i❗️ ❗️

      ↪️ i ➕ 1 ◀️ 📏list❓ 🍇
        🐻 builder separator❗️
      🍉
    🍉
    🧠builder❗️ ➡️ 🖍bytes
    📐builder❗️ ➡️ 🖍count
  🍉

  📗 Puts this 🔡 to the standard output. 📗
  ❗️ 😀 📻 🔤sStringPrint🔤

  📗 Puts this 🔡 to the standard output without adding a new line. 📗
  ❗️ 👄 📻 🔤sStringPrintNoLn🔤

  📗 Returns 👍 if this string is equal to *b*. 📗
  🙌 b 🔡 ➡️ 👌 🍇
    ↪️ 👇 😜 b 🍇
      ↩️ 👍
    🍉
    ↩️ ↔️👇 b❗️ 🙌 0
  🍉

  📗
    Compares this string to *b* and returns -1, 0, or 1 depending on whether
    this string is less than, equal to, or greater than `b`.

    >!N Note that this method compares the strings byte per byte
    >!N and is only meant for use with non-localized sorting. The results of
    >!N the sort will always be the same, but may not appear logical to human
    >!N beings.
  📗
  ❗️ ↔️ b 🔡 ➡️ 🔢 🍇
    ↪️ 📐 b❗️ ◀️ count 🍇
      ↩️ -1
    🍉
    ↪️ 📐 b❗️ ▶️ count 🍇
      ↩️ 1
    🍉

    ☣️ 🍇
      ↩️ ↔️ bytes 🧠b❗️ count❗️
    🍉
  🍉

  📗
    Returns a new string consisting of *length* graphemes beginning from
    the grapheme at index *from* in this string. Complexity: O(n).

    For instance:

    ```
    🔪🔤🇦🇽👨‍👩‍👧‍👧🤚🏾🔤 1 1❗️ 💭 returns 🔤👨‍👩‍👧‍👧🔤
    🔪🔤Apples🔤 2 4❗️ 💭 returns 🔤ples🔤
    ```
  📗
  ❗️ 🔪 from 🔢 length 🔢 ➡️ 🔡 📻 🔤sStringGraphemeSubstring🔤

  🔒 ❗️ 🗡 from 🔢 length 🔢 ➡️ 🔡 🍇
    ↪️ from ▶️️🙌 count 🍇
      ↩️ 🔤🔤
    🍉
    length ➡️ 🖍🆕normal_length
    ↪️ from ➕ length ▶️️🙌 count 🍇
      count ➖ from ➡️ 🖍normal_length
    🍉

    ☣️ 🍇
      🆕🧠 normal_length❗️ ➡️ new
      🚜 new 0 bytes from normal_length❗️
      ↩️ 🆕🔡 new normal_length❗️
    🍉
  🍉

  📗
    Finds the first occurrences of *search* in this string. Search is
    performed from left to right.

    Returns the index of the first occurrence or no value if *search* does not
    occur.
  📗
  ❗️ 🔍 search 🔡 ➡️ 🍬🔢 🍇
    0 ➡️ 🖍️🆕index
    🎶👇❗ ➡️ chars
    📏chars❓ ➡️ length

    🔁 index ◀️ length 🍇
      🔪👇 index length➖index❗ ➡️ substring
      ↪️ 🎼substring search❗ 🍇
        ↩️ index
      🍉
      index ⬅️➕ 1
    🍉

    ↩️ 🤷
  🍉

  📗
    Finds the first occurrences of a string in this string after the
    index *offset*. Search is performed from left to right.

    Returns the index of the occurrence or no value if *search* does not
    occur.
  📗
  ❗️ 🕵️‍♀️ search 🔡 offset 🔢 ➡️ 🍬🔢 📻 🔤sStringFindFromIndex🔤

  📗 Whether this strings begins with another string. 📗
  ❗️ 🎼 testString 🔡 ➡️ 👌 📻 🔤sStringBeginsWith🔤

  📗 Whether this strings ends with another string. 📗
  ❗️ ⛳️ testString 🔡 ➡️ 👌 📻 🔤sStringEndsWith🔤

  📗
    This string is split up into substring at each place *seperator* is found.
    *seperator* itself is removed from the string.
  📗
  ❗️ 🔫 separator 🔡 ➡️ 🍨🐚🔡🍆 🍇
    🆕🍨🐚🔡🍆❗️ ➡️ 🖍🆕list

    0 ➡️ 🖍🆕lastIndex
    👍 ➡️ 🖍🆕continue
    🔁 continue 🍇
      ↪️ 🕵️‍♀️👇 separator lastIndex❗️ ➡️ newIndex 🍇
        🐻 list 🗡👇 lastIndex newIndex ➖ lastIndex❗️❗️
        newIndex ➕ 📐separator❗️ ➡️ 🖍lastIndex
      🍉
      🙅 🍇
        👎 ➡️ 🖍continue
      🍉
    🍉
    🐻 list 🗡👇 lastIndex  🤜📐❗️🤛 ➖ lastIndex❗️❗️

    ↩️ list
  🍉

  📗
    The 🔧 method returns a new string, on which whitespace has been removed
    from both ends of a string.
  📗
  ❗️ 🔧 ➡️ 🔡 📻 🔤sStringTrim🔤

  🔒❗️🥢 cb 🍇🔢🔢🍉 📻 🔤sStringCodepoints🔤

  📗
    Returns the number of bytes required to represent the string’s content in
    UTF8.

    For example:

    ```
    📐🔤✋🏾🔤❗️  💭 returns 7
    📐🔤한🔤❗️  💭 returns 3
    📐🔤A🔤❗️  💭 returns 1
    ```

    >!H The return value is not at all meaningful from a human perspective.
    >!H The character `ä` for instance, is encoded with two bytes but clearly
    >!H perceived as one character.
  📗
  ❗️ 📐 ➡️ 🔢 🍇
    ↩️ count
  🍉

  📗
    This methods tries to construct an integer from this string in the given
    base. It returns the integer or no value if the string does not match the
    regular expression `[+-]?[0-9a-zA-Z]+` or it does not represent a valid
    value in the given base.
  📗
  ❗️ 🔢 base 🔢 ➡️ 🍬🔢 📻 🔤sStringToInt🔤

  📗
    This methods tries to construct a 💯 from this 🔡. It returns the 💯, or no
    value if the 🔡 does not match the regular expression
    `[+-]?([0-9]+(\.[0-9]*)?|[0-9]*\.[0-9]+)([eE][+-]?[0-9]+)?`
    or if it does not represent a valid 💯.
  📗
  ❗️ 💯 ➡️ 🍬💯 📻 🔤sStringToReal🔤

  📗 Converts the string to data encoded as UTF8. 📗
  ❗️ 📇 ➡️ 📇 🍇
    ☣️ 🍇
      ↩️ 🆕📇 bytes count❗️
    🍉
  🍉

  📗
    Hashes this string.
    The results for strings whose values equal are guaranteed to be the same
    within a process.
  📗
  ❗️ ⚗️ ➡️ 🔢 📻 🔤sStringHash🔤

  📗 Returns an array with the graphemes from this string. 📗
  ❗️ 🎶 ➡️ 🍨🐚🔡🍆 🍇
    🆕🍦🐚🔡🍆❗️ ➡️ list
    🔣 👇🍇 grapheme🔡 🐻list grapheme❗️🍉❗️
    ↩️ 🥄list❗️
  🍉

  🔒❗️ 🔣 cb 🍇🔡🍉 📻 🔤sStringGraphemes🔤

  📗
    Returns a new string in which all characters have been converted to their
    respective uppercase equivalents.
  📗
  ❗️ 📫 ➡️ 🔡 📻 🔤sStringToUppercase🔤

  📗
    Returns a new string in which all characters have been converted to their
    respective lowercase equivalents.
  📗
  ❗️ 📪 ➡️ 🔡 📻 🔤sStringToLowercase🔤

  📗 Returns an iterator to iterate over the graphemes of this string. 📗
  ❗️ 🍡 ➡️ 🍡🐚🔡🍆 🍇
    ↩️ 🍡🎶❗️❗️
  🍉

  ❗️ 🔡 ➡️ 🔡 🍇
    ↩️ 👇
  🍉
🍉

📗 Mutable sequence of characters (“string builder”). 📗
🌍 🐇 🔠 🍇
  🖍🆕 data 🧠
  🖍🆕 count 🔢
  🖍🆕 size 🔢

  🐊 ↘️🔸🔡

  📗 Creates an empty 🔠 with an initial capacity of 16. 📗
  🥯🆕 🍇
    0 ➡️ 🖍count
    16 ➡️ 🖍size
    ☣️ 🍇
      🆕🧠 16❗️ ➡️ 🖍data
    🍉
  🍉

  📗
    Creates a 🔠 with the contents of the provided string and a capacity of
    the length of the string plus 16.
  📗
  🥯🆕 ▶️ 🔡 string 🔡 🍇
    0 ➡️ 🖍count
    📐string❗️➕ 16 ➡️ 🖍size
    ☣️ 🍇
      🆕🧠 size❗️ ➡️ 🖍data
      🦘👇 string❗️
    🍉
  🍉

  📗 Creates an empty 🔠 with the provided *capacity*. 📗
  🥯🆕 capacity 🔢 🍇
    0 ➡️ 🖍count
    capacity ➡️ 🖍size
    ☣️ 🍇
      🆕🧠 capacity❗️ ➡️ 🖍data
    🍉
  🍉

  📗 Adds the contents of *string* to this 🔠. 📗
  🥯❗️ 🐻 string 🔡 🍇
    📐string❗️ ➡️ stringSize
    ☣️ 🍇
      🍜👇 stringSize❗️
      🦘👇 string❗️
    🍉
  🍉

  📗
    Ensures their is enough space left to append `stringSize` bytes.
  📗
  🥯☣️🔒❗️ 🍜 stringSize 🔢 🍇
    count ➕ stringSize ➡️ minimumSize
    ↪️ minimumSize ▶️ size 🎍🐌🍇
      size ⬅️✖️ 2
      ↪️ minimumSize ▶️ size 🍇
        minimumSize ➡️ 🖍size
      🍉
      🏗 data size❗️
    🍉
  🍉

  🥯☣️🔒❗️ 🦘 string 🔡 🍇
    📐string❗️ ➡️ stringSize
    🚜 data count 🧠 string❗️ 0 stringSize❗️
    count ⬅️➕ stringSize
  🍉

  📗
    Copies `bytes` bytes from `offset` of `strdata` to the end of the string.
    The data must be valid UTF-8 data or the behavior is undefined.
  📗
  ☣️❗️🐺 strdata 🧠 offset 🔢 bytes 🔢 🍇
    🍜👇 bytes❗️
    🚜 data count strdata offset bytes❗️
    count ⬅️➕ bytes
  🍉

  📗
    Appends a single byte to the end of the string. The caller is reponsible
    for ensuring that the resulting string is still valid UTF-8 or undefined
    behavior is caused.
  📗
  ☣️❗️🐻🔸💧byte💧 🍇
    🍜👇 1❗️
    byte ➡️ 🐽🐚💧🍆 data count❗️
    count ⬅️➕ 1
  🍉

  📗
    Appends a single codepoint to the end of the string.
    If the codepoint is not valid, the method returns 👎 and the string builder
    is not modified.
  📗
  ☣️❗️🐻🔸🔣 codepoint 🔢 ➡️ 👌 🍇
    ↪️ codepoint ◀️ 0 🍇
      ↩️👎
    🍉
    ↪️ codepoint ◀️ 0x80 🍇
      🍜👇 1❗️
      💧codepoint❗️ ➡️ 🐽🐚💧🍆data count❗️
      count ⬅️➕ 1
      ↩️👍
    🍉
    ↪️ codepoint ◀️ 0x800 🍇
      🍜👇 2❗️
      💧0xC0 ➕ 🤜codepoint 👉 6 🤛❗️ ➡️ 🐽🐚💧🍆data count❗️
      count ⬅️➕ 1
      💧0x80 ➕ 🤜codepoint ⭕ 0x3F 🤛❗️ ➡️ 🐽🐚💧🍆data count❗️
      count ⬅️➕ 1
      ↩️👍
    🍉
    ↪️ codepoint ◀️ 0x10000 🍇
      🍜👇 3❗️
      💧0xE0 ➕ 🤜codepoint 👉 12 🤛❗️ ➡️ 🐽🐚💧🍆data count❗️
      count ⬅️➕ 1
      💧0x80 ➕ 🤜🤜codepoint 👉 6 🤛 ⭕ 0x3F 🤛❗️ ➡️ 🐽🐚💧🍆data count❗️
      count ⬅️➕ 1
      💧0x80 ➕ 🤜codepoint ⭕ 0x3F 🤛❗️ ➡️ 🐽🐚💧🍆data count❗️
      count ⬅️➕ 1
      ↩️👍
    🍉
    ↪️ codepoint ◀️ 0x110000 🍇
      🍜👇 4❗️
      💧0xF0 ➕ 🤜codepoint 👉 18 🤛❗️ ➡️ 🐽🐚💧🍆data count❗️
      count ⬅️➕ 1
      💧0x80 ➕ 🤜🤜codepoint 👉 12 🤛 ⭕ 0x3F 🤛❗️ ➡️ 🐽🐚💧🍆data count❗️
      count ⬅️➕ 1
      💧0x80 ➕ 🤜🤜codepoint 👉 6 🤛 ⭕ 0x3F 🤛❗️ ➡️ 🐽🐚💧🍆data count❗️
      count ⬅️➕ 1
      💧0x80 ➕ 🤜codepoint ⭕ 0x3F 🤛❗️ ➡️ 🐽🐚💧🍆data count❗️
      count ⬅️➕ 1
      ↩️👍
    🍉
    ↩️👎
  🍉

  📗 Returns the memory area representing the data of this 🔠. 📗
  ❗️🧠 ➡️ 🧠 🍇
    ↩️ data
  🍉

  📗
    Returns the number of UTF-8 bytes required to represent the content of
    the instance.
  📗
  ❗️ 📐 ➡️ 🔢 🍇
    ↩️ count
  🍉

  📗 Returns the value of this this 🔠 as a 🔡. 📗
  ❗️ 🔡 ➡️ 🔡 🍇
    ☣️ 🍇
      ↩️ 🆕🔡 data count❗️
    🍉
  🍉
🍉

